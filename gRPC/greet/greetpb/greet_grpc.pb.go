// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: greet/greetpb/greet.proto

package greetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	//Unary req from client
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	//Stream server
	GreetManyTimes(ctx context.Context, in *GreetRequestManyTimes, opts ...grpc.CallOption) (GreetService_GreetManyTimesClient, error)
	//Client streaming
	GreetLong(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetLongClient, error)
	//Bi Direct. streaming
	GreetBiDirect(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetBiDirectClient, error)
	// unary error handling
	// this RPC will throw an exeption if name =="Eric"
	// Error code INVALID_ARGUMENT
	GreetErr(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	//unary with deadline
	GreetWithDeadline(ctx context.Context, in *GreetRequestDeadline, opts ...grpc.CallOption) (*GreetResponseDeadline, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetManyTimes(ctx context.Context, in *GreetRequestManyTimes, opts ...grpc.CallOption) (GreetService_GreetManyTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], "/greet.GreetService/GreetManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_GreetManyTimesClient interface {
	Recv() (*GreetResponseManyTimes, error)
	grpc.ClientStream
}

type greetServiceGreetManyTimesClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetManyTimesClient) Recv() (*GreetResponseManyTimes, error) {
	m := new(GreetResponseManyTimes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetLong(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetLongClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], "/greet.GreetService/GreetLong", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetLongClient{stream}
	return x, nil
}

type GreetService_GreetLongClient interface {
	Send(*GreetRequestCliStreaming) error
	CloseAndRecv() (*GreetResponseCliStriaming, error)
	grpc.ClientStream
}

type greetServiceGreetLongClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetLongClient) Send(m *GreetRequestCliStreaming) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetLongClient) CloseAndRecv() (*GreetResponseCliStriaming, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GreetResponseCliStriaming)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetBiDirect(ctx context.Context, opts ...grpc.CallOption) (GreetService_GreetBiDirectClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], "/greet.GreetService/GreetBiDirect", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceGreetBiDirectClient{stream}
	return x, nil
}

type GreetService_GreetBiDirectClient interface {
	Send(*GreetRequestBiDirect) error
	Recv() (*GreetResponseBiDirecrt, error)
	grpc.ClientStream
}

type greetServiceGreetBiDirectClient struct {
	grpc.ClientStream
}

func (x *greetServiceGreetBiDirectClient) Send(m *GreetRequestBiDirect) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceGreetBiDirectClient) Recv() (*GreetResponseBiDirecrt, error) {
	m := new(GreetResponseBiDirecrt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) GreetErr(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/greet.GreetService/GreetErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) GreetWithDeadline(ctx context.Context, in *GreetRequestDeadline, opts ...grpc.CallOption) (*GreetResponseDeadline, error) {
	out := new(GreetResponseDeadline)
	err := c.cc.Invoke(ctx, "/greet.GreetService/GreetWithDeadline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	//Unary req from client
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	//Stream server
	GreetManyTimes(*GreetRequestManyTimes, GreetService_GreetManyTimesServer) error
	//Client streaming
	GreetLong(GreetService_GreetLongServer) error
	//Bi Direct. streaming
	GreetBiDirect(GreetService_GreetBiDirectServer) error
	// unary error handling
	// this RPC will throw an exeption if name =="Eric"
	// Error code INVALID_ARGUMENT
	GreetErr(context.Context, *GreetRequest) (*GreetResponse, error)
	//unary with deadline
	GreetWithDeadline(context.Context, *GreetRequestDeadline) (*GreetResponseDeadline, error)
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreetServiceServer) GreetManyTimes(*GreetRequestManyTimes, GreetService_GreetManyTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetManyTimes not implemented")
}
func (UnimplementedGreetServiceServer) GreetLong(GreetService_GreetLongServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetLong not implemented")
}
func (UnimplementedGreetServiceServer) GreetBiDirect(GreetService_GreetBiDirectServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetBiDirect not implemented")
}
func (UnimplementedGreetServiceServer) GreetErr(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetErr not implemented")
}
func (UnimplementedGreetServiceServer) GreetWithDeadline(context.Context, *GreetRequestDeadline) (*GreetResponseDeadline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetWithDeadline not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GreetRequestManyTimes)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).GreetManyTimes(m, &greetServiceGreetManyTimesServer{stream})
}

type GreetService_GreetManyTimesServer interface {
	Send(*GreetResponseManyTimes) error
	grpc.ServerStream
}

type greetServiceGreetManyTimesServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetManyTimesServer) Send(m *GreetResponseManyTimes) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_GreetLong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetLong(&greetServiceGreetLongServer{stream})
}

type GreetService_GreetLongServer interface {
	SendAndClose(*GreetResponseCliStriaming) error
	Recv() (*GreetRequestCliStreaming, error)
	grpc.ServerStream
}

type greetServiceGreetLongServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetLongServer) SendAndClose(m *GreetResponseCliStriaming) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetLongServer) Recv() (*GreetRequestCliStreaming, error) {
	m := new(GreetRequestCliStreaming)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetBiDirect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).GreetBiDirect(&greetServiceGreetBiDirectServer{stream})
}

type GreetService_GreetBiDirectServer interface {
	Send(*GreetResponseBiDirecrt) error
	Recv() (*GreetRequestBiDirect, error)
	grpc.ServerStream
}

type greetServiceGreetBiDirectServer struct {
	grpc.ServerStream
}

func (x *greetServiceGreetBiDirectServer) Send(m *GreetResponseBiDirecrt) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceGreetBiDirectServer) Recv() (*GreetRequestBiDirect, error) {
	m := new(GreetRequestBiDirect)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_GreetErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GreetErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GreetErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GreetErr(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_GreetWithDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequestDeadline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).GreetWithDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.GreetService/GreetWithDeadline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).GreetWithDeadline(ctx, req.(*GreetRequestDeadline))
	}
	return interceptor(ctx, in, info, handler)
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreetService_Greet_Handler,
		},
		{
			MethodName: "GreetErr",
			Handler:    _GreetService_GreetErr_Handler,
		},
		{
			MethodName: "GreetWithDeadline",
			Handler:    _GreetService_GreetWithDeadline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetManyTimes",
			Handler:       _GreetService_GreetManyTimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GreetLong",
			Handler:       _GreetService_GreetLong_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GreetBiDirect",
			Handler:       _GreetService_GreetBiDirect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet/greetpb/greet.proto",
}
